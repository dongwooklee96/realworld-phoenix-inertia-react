defmodule Realworld.Repo.Migrations.Articles do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_sqlite.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:tag, primary_key: false) do
      add :updated_at, :utc_datetime_usec, null: false
      add :created_at, :utc_datetime_usec, null: false
      add :name, :text, null: false
      add :id, :uuid, null: false, primary_key: true
    end

    create unique_index(:tag, [:name], name: "tag_unique_name_index")

    create table(:favorite, primary_key: false) do
      add :article_id,
          references(:article,
            column: :id,
            name: "favorite_article_id_fkey",
            type: :uuid,
            on_delete: :delete_all
          ),
          primary_key: true,
          null: false

      add :user_id,
          references(:user,
            column: :id,
            name: "favorite_user_id_fkey",
            type: :uuid,
            on_delete: :delete_all
          ),
          primary_key: true,
          null: false

      add :updated_at, :utc_datetime_usec, null: false
      add :created_at, :utc_datetime_usec, null: false
    end

    create table(:comment, primary_key: false) do
      add :user_id, references(:user, column: :id, name: "comment_user_id_fkey", type: :uuid)

      add :article_id,
          references(:article, column: :id, name: "comment_article_id_fkey", type: :uuid),
          null: false

      add :updated_at, :utc_datetime_usec, null: false
      add :created_at, :utc_datetime_usec, null: false
      add :body, :text, null: false
      add :id, :uuid, null: false, primary_key: true
    end

    create table(:article_tag, primary_key: false) do
      add :tag_id,
          references(:tag,
            column: :id,
            name: "article_tag_tag_id_fkey",
            type: :uuid,
            on_delete: :delete_all
          ),
          primary_key: true,
          null: false

      add :article_id,
          references(:article,
            column: :id,
            name: "article_tag_article_id_fkey",
            type: :uuid,
            on_delete: :delete_all
          ),
          primary_key: true,
          null: false
    end

    create table(:article, primary_key: false) do
      add :user_id, references(:user, column: :id, name: "article_user_id_fkey", type: :uuid),
        null: false

      add :updated_at, :utc_datetime_usec, null: false
      add :created_at, :utc_datetime_usec, null: false
      add :body, :text, null: false
      add :body_raw, :text, null: false
      add :description, :text, null: false
      add :title, :text, null: false
      add :slug, :text, null: false
      add :id, :uuid, null: false, primary_key: true
    end

    create unique_index(:favorite, [:user_id, :article_id],
             name: "favorite_unique_favorite_index"
           )

    create unique_index(:article, [:slug], name: "article_unique_slug_index")
  end

  def down do
    drop_if_exists unique_index(:article, [:slug], name: "article_unique_slug_index")

    drop_if_exists unique_index(:favorite, [:user_id, :article_id],
                     name: "favorite_unique_favorite_index"
                   )

    drop constraint(:article, "article_user_id_fkey")

    drop table(:article)

    drop constraint(:article_tag, "article_tag_article_id_fkey")

    drop constraint(:article_tag, "article_tag_tag_id_fkey")

    drop table(:article_tag)

    drop constraint(:comment, "comment_article_id_fkey")

    drop constraint(:comment, "comment_user_id_fkey")

    drop table(:comment)

    drop constraint(:favorite, "favorite_user_id_fkey")

    drop constraint(:favorite, "favorite_article_id_fkey")

    drop table(:favorite)

    drop_if_exists unique_index(:tag, [:name], name: "tag_unique_name_index")

    drop table(:tag)
  end
end